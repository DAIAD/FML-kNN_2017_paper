package org.apache.spark.transformations;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedList;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.spark.api.java.function.PairFlatMapFunction;
import org.apache.spark.tools.ExecConf;
import org.apache.spark.values.Phase1_2Value;

import scala.Tuple2;

public class MapPhase2 implements PairFlatMapFunction<String, Integer, Phase1_2Value> {

	private static final long serialVersionUID = 1L;
	private String[][] RrangeArray;
	private String[][] SrangeArray;
	private ExecConf conf;

	public MapPhase2(ExecConf conf) throws IOException {
		this.conf = conf;
		RrangeArray = new String[conf.getShift()][conf.getNumOfPartition()];
                SrangeArray = new String[conf.getShift()][conf.getNumOfPartition()];

		for (int i=0; i<conf.getShift(); i++) {
			Path rPt = new Path(conf.getPath() + "Rrange/part-0000" + i);
			Path sPt = new Path(conf.getPath() + "Srange/part-0000" + i);
			FileSystem fs = rPt.getFileSystem(new Configuration());
			BufferedReader rBr = new BufferedReader(new InputStreamReader(fs.open(rPt)));
			fs = sPt.getFileSystem(new Configuration());
			BufferedReader sBr = new BufferedReader(new InputStreamReader(fs.open(sPt)));

			int doneR = 0, doneS = 0, cntR = 0, cntS = 0;
			while ((doneR != 1)) {
				String lineR = rBr.readLine();
				if (lineR == null) {
					doneR = 1;
				} else {
					RrangeArray[i][cntR++] = lineR.trim();
				}
			}

			while ((doneS != 1)) {
				String lineS = sBr.readLine();
				if (lineS == null) {
					doneS = 1;
				} else {
					SrangeArray[i][cntS++] = lineS.trim();
				}
			}

			rBr.close();
			sBr.close();
		}
	}

	public ArrayList<String> getPartitionId(String z, String src, String sid) throws IOException {

		String ret = null;
		String[] mark = null;
		int sidInt = Integer.valueOf(sid);
		ArrayList<String> idList = new ArrayList<String>(conf.getNumOfPartition());

		// 0 - R from Outer 1 - S from inner
		if (src.compareTo("0") == 0)
			mark = RrangeArray[sidInt];
		else if (src.compareTo("1") == 0)
			mark = SrangeArray[sidInt];
		else {
			System.out.println(src);
			System.out.println("Unknown source for input record !!!");
			System.exit(-1);
		}

		// Partition is ordered from 0
		for (int i = 0; i < conf.getNumOfPartition(); i++) {
			String range = mark[i];
			String[] parts = null;
			parts = range.split(" +");
			String low = parts[0].substring(2);
			String high = parts[1].substring(0, parts[1].length());

			// Check z against all partitions, this is a must
			if (z.compareTo(low) >=0 && z.compareTo(high) <= 0) {
				ret = Integer.toString(i);
				idList.add(ret);
			}
		}
		return idList;
	}

	@Override
	public Iterable<Tuple2<Integer, Phase1_2Value>> call(String input) throws Exception {

		String line = input.trim();
		line = line.replace("(", "");
		line = line.replace(")", "");
		String[] parts = line.split(",");
		line = parts[1];
		parts = line.split("");
		int zOffset, ridOffset, srcOffset, sidOffset, classOffset;
		zOffset = 0;
		ridOffset = zOffset + 1;
		srcOffset = ridOffset + 1;
		sidOffset = srcOffset + 1;
		classOffset = sidOffset + 1;

		// Figure out to which partition range the record belong to.
		ArrayList<String> pidList = getPartitionId(parts[zOffset],
				parts[srcOffset], parts[sidOffset]);
		if (pidList.size() == 0) {
			System.out.println("Cannot get pid");
			System.exit(-1);
		}

		LinkedList<Tuple2<Integer, Phase1_2Value>> result = new LinkedList<Tuple2<Integer, Phase1_2Value>>();
		for (int i = 0; i < pidList.size(); i++) {

			String pid = pidList.get(i);
			int intSid = Integer.valueOf(parts[sidOffset]);
			int intPid = Integer.valueOf(pid);
			int groupKey = intSid * conf.getNumOfPartition() + intPid;

			Phase1_2Value bp2v = new Phase1_2Value(parts[zOffset],
					parts[ridOffset], Integer.parseInt(parts[srcOffset]),
					groupKey, Math.round(Float.parseFloat(parts[classOffset])));
			result.add(new Tuple2<Integer, Phase1_2Value>(groupKey, bp2v));
		}
		
		return result;
	}
}
